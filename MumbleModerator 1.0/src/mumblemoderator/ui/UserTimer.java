/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mumblemoderator.ui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Calendar;
import javax.swing.JPanel;
import javax.swing.Timer;
import java.awt.Dimension;
import javax.swing.JLabel;
import javax.swing.SwingConstants;

import mumblemoderator.service.model.User;
import mumblemoderator.util.Util;

import java.awt.Color;
import java.beans.Transient;

/**
 *
 * @author ffitzke
 */
public class UserTimer extends JPanel implements ActionListener{

	private static final long serialVersionUID = 2926677236270510951L;
	private static int avgTalkTime = 30; // Sekunden 
	private int avgUserTalkTime = 0; // Sekunden 
	private static int maxProgressbarvalue;
	private Timer timer = new Timer(1000, this);
	private boolean isrunning = false;


	private Calendar calendar;
	private User _user;

	public static int getAvgTalkTime() {
		return avgTalkTime;

	}

	public void setAvgTalkTime(long avgTalkTime) {
		int avgTalkTime_int=0;
		if (avgTalkTime > Integer.MAX_VALUE) {
			avgTalkTime_int = Integer.MAX_VALUE;
			setAvgTalkTime(avgTalkTime_int);

		} else if (avgTalkTime < Integer.MIN_VALUE) {
			avgTalkTime_int = Integer.MIN_VALUE;
			setAvgTalkTime(avgTalkTime_int);

		} else { 
			setAvgTalkTime((int)avgTalkTime);

		}
		
	}
	
	public void setAvgTalkTime(int avgTalkTime) {
		UserTimer.avgTalkTime = avgTalkTime;
		if ((int) Math.ceil(avgTalkTime * 1.5) > maxProgressbarvalue) {
			maxProgressbarvalue = (int) Math.ceil(avgTalkTime * 1.5);
		}
		myProgressbar1.setLimit2(avgTalkTime);
		myProgressbar1.repaint();

	}
	
	public int getAvgUserTalkTime() {
		return avgUserTalkTime;

	}

	public void setAvgUserTalkTime(int avgTalkTime) {
		avgUserTalkTime = avgTalkTime;
		if (avgTalkTime > maxProgressbarvalue) {
			maxProgressbarvalue = avgTalkTime;

		}
		myProgressbar1.setLimit1(avgTalkTime);
		myProgressbar1.repaint();
		
	}
	
	/**
	 * Creates new form UserTimer
	 */

	public UserTimer(User user) {
		this();
		this._user = user;
		jLabel_username.setText(user.name);
		
		
	}

	
	
	public UserTimer() {
		
		boolean debug = false;
		setBackground(new Color(169, 169, 169));
		setMinimumSize(new Dimension(450, 36));
		setMaximumSize(new Dimension(450, 36));
		initComponents();
		setAvgUserTalkTime(1);
		// setAvgTalkTime(1);
		calendar = Calendar.getInstance();
		myProgressbar1.setMaximum(maxProgressbarvalue);
		setLayout(null);
		add(jLabel_username);
		add(myProgressbar1);
		
		label_timer = new JLabel();
		label_timer.setHorizontalAlignment(SwingConstants.RIGHT);
		label_timer.setText("000:00");
		label_timer.setBounds(110, 2, 50, 15);
		add(label_timer);
		
		label_pbarmax = new JLabel();
		label_pbarmax.setVisible(debug);
		label_pbarmax.setText("000:00");
		label_pbarmax.setHorizontalAlignment(SwingConstants.RIGHT);
		label_pbarmax.setBounds(400, 18, 40, 15);
		add(label_pbarmax);
		
		label_pbarlimit1 = new JLabel();
		label_pbarlimit1.setVisible(debug);
		label_pbarlimit1.setText("000:00");
		label_pbarlimit1.setHorizontalAlignment(SwingConstants.RIGHT);
		label_pbarlimit1.setBounds(170, 18, 40, 15);
		add(label_pbarlimit1);
		
		label_pbarlimit2 = new JLabel();
		label_pbarlimit2.setVisible(debug);
		label_pbarlimit2.setText("000:00");
		label_pbarlimit2.setHorizontalAlignment(SwingConstants.RIGHT);
		label_pbarlimit2.setBounds(250, 18, 40, 15);
		add(label_pbarlimit2);
		timer.start();
		isrunning = false;
		
		if (maxProgressbarvalue == 0) {
			maxProgressbarvalue = (int) Math.ceil(avgTalkTime * 1.5);
		}
		
		if (avgTalkTime == 0) {
			avgTalkTime = 30;
		}

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel_username = new javax.swing.JLabel();
        jLabel_username.setBounds(5, 2, 115, 15);
        myProgressbar1 = new mumblemoderator.ui.MyProgressbar();
        myProgressbar1.setBounds(165, 3, 280, 14);

        jToggleButton1.setText("jToggleButton1");

        jLabel_username.setText("username");
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel_username;
    private javax.swing.JToggleButton jToggleButton1;
    private mumblemoderator.ui.MyProgressbar myProgressbar1;
    // End of variables declaration//GEN-END:variables
	private JLabel label_timer;
	private JLabel label_pbarmax;
	private JLabel label_pbarlimit2;
	private JLabel label_pbarlimit1;

	
	

	public void setTimerLabel(int sec){
		label_timer.setText(Util.sectoString(sec));
	}

    

	public void startTimer(){
		calendar = Calendar.getInstance();
		isrunning = true;

	}

	public void stopTimer(){
		isrunning = false;
		setAvgTalkTime((int)User.getoverallavgtalktime()/1000);
		setTimerLabel((int)_user.gettalktime()/1000);
		
		setAvgUserTalkTime((int)_user.getavgtalktime()/1000);
				
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (isrunning) {
			int talktime = (int)Math.ceil((System.currentTimeMillis() - calendar.getTimeInMillis()) / 1000);
			myProgressbar1.setValue(talktime);
			if (myProgressbar1.getMaximum() < talktime) {
				maxProgressbarvalue = talktime;
			}
			setTimerLabel((int)_user.gettalktime()/1000);
			
			label_pbarmax.setText(new Integer(maxProgressbarvalue).toString());
			label_pbarlimit2.setText(new Integer(myProgressbar1.getLimit2()).toString());
			label_pbarlimit1.setText(new Integer(myProgressbar1.getLimit1()).toString());
			
		}
		
		if ((maxProgressbarvalue > (int) Math.ceil(avgUserTalkTime * 1.5)) && (maxProgressbarvalue > (int) Math.ceil(avgTalkTime * 1.5)) && (maxProgressbarvalue > 45)) {
			if ((int) Math.ceil(avgUserTalkTime * 1.5) > (int) Math.ceil(avgTalkTime * 1.5)) {
				maxProgressbarvalue = (int) Math.ceil(avgUserTalkTime * 1.5 * 0.9);
			} else {
				maxProgressbarvalue = (int) Math.ceil(avgTalkTime * 1.5 * 0.9);
			}			
			
		}
		
		
		myProgressbar1.setMaximum(maxProgressbarvalue);
	}
	
	@Override
	@Transient
	public Dimension getPreferredSize() {
		return new Dimension(450,  36);
	}
	
}